apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.protobuf'

android {
    ndkVersion "25.1.8937393"
    compileSdk 28
    defaultConfig {
        applicationId "com.home.Swift_OpenGL_Example"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        /*
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        */
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // The doNotStrip option is not properly scoped to the "debug" build type
            // See https://issuetracker.google.com/issues/155215248.
            packagingOptions {
                doNotStrip '**/*.so'
            }
            debuggable true
            jniDebuggable true
        }
    }
    splits {
        abi {
            reset()
            enable true
            universalApk false
            include "arm64-v8a"
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    buildToolsVersion '30.0.3'
    namespace 'com.home.Swift_OpenGL_Example'
    packagingOptions {
        jniLibs {
            useLegacyPackaging false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    //protobuf(files("$rootDir/../Models"))
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'
}



task buildSwiftArm64(type: Exec) {
    commandLine 'sh', '-c', getSwiftBuildCommand('arm64-v8a')
}

task buildSwiftIntel64(type: Exec) {
    commandLine 'sh', '-c', getSwiftBuildCommand('x86_64')
}

task cleanSwift(type: Exec) {
    commandLine 'sh', '-c', "rm -rf swiftpm-build"
}

preBuild.dependsOn buildSwiftArm64
preBuild.dependsOn buildSwiftIntel64

clean.dependsOn cleanSwift

def getSwiftBuildCommand(abi) {
    def buildScript = "../../swift-android-toolchain/swiftpm.sh"
    return "ANDROID_ABI=$abi BUILD_TYPE=debug LIBRARY_OUTPUT_DIRECTORY='${projectDir}/src/main/jniLibs/${abi}' $buildScript"
}

repositories {
    mavenCentral()
}
